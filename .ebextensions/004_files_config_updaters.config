commands:
  create_post_dir:
    command: "mkdir -p /opt/elasticbeanstalk/hooks/appdeploy/post"
    ignoreErrors: true

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/010_set_koding_env_vars.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      
      EB_APP_DEPLOY_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_dir)
      cd $EB_APP_DEPLOY_DIR
      cp env_overrides.sh /etc/profile.d/koding_envvars.sh


  "/opt/elasticbeanstalk/hooks/appdeploy/post/020_set_env_vars.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      source /etc/profile

      /opt/ami-scripts/eb/set_env_vars.sh
      /opt/ami-scripts/eb/set_hostname.sh

  "/opt/elasticbeanstalk/hooks/appdeploy/post/030_configure_papertrail.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      source /etc/profile

      # check if we are safe to continue      
      [[ -z $PAPERTRAIL_DESTINATION ]] && echo "PAPERTRAIL_DESTINATION" is required && exit 1
      [[ -z $PAPERTRAIL_TOKEN ]] && echo "PAPERTRAIL_TOKEN" is required && exit 1

      # register, configure and restart
      /opt/ami-scripts/eb/configure_papertrail.sh

  "/opt/elasticbeanstalk/hooks/appdeploy/post/050_configure_datadog.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      source /etc/profile

      # check if we are safe to continue
      [[ -z $DATADOG_API_KEY ]] && echo "DATADOG_API_KEY" is required && exit 1

      # register, configure and restart
      /opt/ami-scripts/eb/configure_datadog.sh


  "/opt/elasticbeanstalk/hooks/appdeploy/post/060_deploy_countly.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      source /etc/profile

      cd /opt/countly

      # install traverse package since config extender depends on it.
      npm install traverse
      
      # add custom plugins to config
      node $EB_APP_DEPLOY_DIR/scripts/add_custom_plugins.js

      # move configs to their places

      cp $EB_APP_DEPLOY_DIR/config/configextender.js /opt/countly/configextender.js
      cp $EB_APP_DEPLOY_DIR/config/api.config.js /opt/countly/api/config.js
      cp $EB_APP_DEPLOY_DIR/config/frontend.express.config.js /opt/countly/frontend/express/config.js
      cp $EB_APP_DEPLOY_DIR/config/plugins.json /opt/countly/plugins/plugins.json

      mkdir -p /opt/countly/frontend/express/public/themes/koding
      cp $EB_APP_DEPLOY_DIR/config/koding.css /opt/countly/frontend/express/public/themes/koding/main.css
      exit 0

  "/opt/elasticbeanstalk/hooks/appdeploy/post/070_configure_supervisord.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash -x
      source /etc/profile

      mkdir -p /var/log/countly

      # required per supervisord installation ( one can override any env var in supervisord with this )
      echo "PATH=/usr/local/bin:$PATH" > /etc/sysconfig/supervisord
      echo "source /opt/ami-scripts/env/env_overrides.sh" >> /etc/sysconfig/supervisord

      ulimit -n 65535
      cp $EB_APP_DEPLOY_DIR/supervisord.conf /etc/supervisord.conf
      service supervisord restart

      # autostart is false, start it after deployment
      /usr/local/bin/supervisorctl start all

      echo "updated configs"

  "/opt/elasticbeanstalk/hooks/appdeploy/post/080_configure_nginx.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash -x
      source /etc/profile

      echo "stopping httpd if exists"
      service httpd stop || echo "httpd is stopped"

      // prepare nginx proxy path.
      rm -rf /var/lib/nginx/tmp/
      mkdir -p /var/lib/nginx/tmp/
      chown -R www-data:www-data /var/lib/nginx/

      # allow nginx to acess express public folder.
      chown -R www-data:www-data /opt/countly/frontend/express/public/

      cp $EB_APP_DEPLOY_DIR/config/nginx.conf /etc/nginx/conf.d/default.conf
      service nginx stop
      service nginx start
